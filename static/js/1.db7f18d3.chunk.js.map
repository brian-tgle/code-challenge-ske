{"version":3,"sources":["hooks/useDebounce.ts","components/lazyImage/index.tsx","components/loading/tableLoading.tsx","services/repository.ts","services/userRepository.ts","pages/challengeOne.tsx"],"names":["value","timeout","useState","state","setState","useEffect","handler","setTimeout","clearTimeout","LazyImage","src","placeHolder","width","height","alt","keepRatio","loaded","setLoaded","imgRef","useRef","handleScroll","window","addEventListener","removeEventListener","element","rect","getBoundingClientRect","top","left","innerHeight","document","documentElement","clientHeight","elementInViewport","current","imgLoader","Image","onload","ratioWH","setAttribute","classList","add","ref","className","TableLoading","colSpan","Array","from","length","map","_","index","instance","axios","create","baseURL","headers","Accept","interceptors","response","use","data","error","Promise","reject","UserRepository","getAll","searchString","perPage","page","Repository","get","ChallengeOne","PER_PAGE","API_DEFAULT_PARAMS","PAGE","useApplicationStore","applicationActions","loading","setLoading","users","setUsers","totalCount","setTotalCount","setSearchString","debouncedSearchString","useDebounce","DEBOUNCE_TIME","MINIMUN_SEARCH_KEY","then","items","total_count","onChangeShowAlert","showAlert","alertType","ALERT_TYPES","SUCCESS","alertMessage","catch","console","ERROR","finally","type","name","placeholder","onChange","event","target","user","login","avatar_url","IMAGE_PLACEHOLDER","score","id"],"mappings":"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","file":"static/js/1.db7f18d3.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\n\nexport default (value: any, timeout: number) => {\n  const [state, setState] = useState(value)\n\n  useEffect(() => {\n    const handler = setTimeout(() => setState(value), timeout)\n\n    return () => clearTimeout(handler)\n  }, [value, timeout])\n\n  return state\n}\n","import { FC, useEffect, useRef, useState } from 'react'\nimport { LazyImageProps } from 'intefaces'\nimport './style.scss'\n\nconst elementInViewport = (element: HTMLImageElement | null) => {\n  const rect = element?.getBoundingClientRect()\n  if (rect) {\n    return (\n      rect.top >= 0 &&\n      rect.left >= 0 &&\n      rect.top <= (\n        window.innerHeight || document.documentElement.clientHeight\n      )\n    )\n  }\n  return 0\n}\n\nconst LazyImage: FC<LazyImageProps> = ({ src, placeHolder, width, height, alt, keepRatio }) => {\n  const [loaded, setLoaded] = useState(false)\n  const imgRef = useRef<HTMLImageElement>(null)\n  useEffect(() => {\n    handleScroll()\n    window.addEventListener('scroll', handleScroll)\n    return () => {\n      window.removeEventListener('scroll', handleScroll)\n    }\n  }, [])\n\n  const handleScroll = () => {\n    if (!loaded && elementInViewport(imgRef.current)) {\n      // Load real image\n      const imgLoader = new Image()\n      imgLoader.src = src\n      imgLoader.onload = () => {\n        const ratioWH = imgLoader.width / imgLoader.height\n\n        imgRef.current?.setAttribute(\n          'src',\n          `${src}`\n        )\n\n        keepRatio && imgRef.current?.setAttribute(\n          'height',\n          `${width / ratioWH}`\n        )\n\n        imgRef.current?.classList.add('opacity')\n\n        setLoaded(true)\n      }\n    }\n  }\n\n  return (\n    <img\n      src={placeHolder}\n      width={width}\n      height={height}\n      ref={imgRef}\n      className=\"lazy-image\"\n      alt={alt}\n    />\n  )\n}\n\nexport default LazyImage\n","import { FC } from 'react'\nimport Skeleton from 'react-loading-skeleton'\nimport { TableLoadingProps } from 'intefaces'\n\nconst TableLoading: FC<TableLoadingProps> = ({ colSpan }) => (\n  <tr>\n    {Array.from({ length: colSpan }).map((_, index) => (\n      <td key={index}>\n        <Skeleton />\n      </td>\n    ))}\n  </tr>\n)\n\nexport default TableLoading\n","import axios from 'axios'\n\nconst baseURL = 'https://api.github.com/'\nconst headers = {\n  Accept: 'application/vnd.github.v3+json',\n  'Content-Type': 'application/json; charset=utf-8'\n}\n\nconst instance = axios.create({\n  baseURL,\n  headers\n})\ninstance.interceptors.response.use(\n  (response) => response.data,\n  (error) => Promise.reject(error)\n)\nexport default instance\n","import Repository from './repository'\n\nconst url = 'search/users'\n\nconst UserRepository = {\n  /**\n   * /GET. Get all users\n   * @param {number} limit the total records in response\n   * @param {number} page the current page\n   * @param {skip} skip the number of skip items\n   * @return {Array} the list of user\n   */\n  getAll: (searchString: string, perPage: number, page: number): any =>\n    Repository.get(`${url}?q=${searchString}&per_page=${perPage}&page=${page}`)\n}\n\nexport default UserRepository\n","import { useEffect, useState, ChangeEvent } from 'react'\nimport useApplicationStore from 'store/application'\nimport LazyImage from 'components/lazyImage'\nimport TableLoading from 'components/loading/tableLoading'\nimport useDebounce from 'hooks/useDebounce'\nimport UserRepository from 'services/userRepository'\nimport { AnyObject, UserItem, UserListResponse } from 'intefaces'\nimport {\n  ALERT_TYPES,\n  API_DEFAULT_PARAMS,\n  DEBOUNCE_TIME,\n  IMAGE_PLACEHOLDER,\n  MINIMUN_SEARCH_KEY\n} from '../constants'\n\nconst ChallengeOne = () => {\n  const { PER_PAGE, PAGE } = API_DEFAULT_PARAMS\n  const [, applicationActions] = useApplicationStore()\n  const [loading, setLoading] = useState(false)\n  const [users, setUsers] = useState<Array<UserItem>>([])\n  const [totalCount, setTotalCount] = useState<number>(0)\n  const [searchString, setSearchString] = useState('')\n  const debouncedSearchString: string = useDebounce(searchString, DEBOUNCE_TIME)\n\n  /**\n   * Fetch user via UserRepository\n   */\n  const fetchUser = (): void => {\n    setLoading(true)\n    UserRepository.getAll(debouncedSearchString, PER_PAGE, PAGE).then((data: UserListResponse) => {\n      setUsers(data?.items)\n      setTotalCount(data?.total_count)\n      applicationActions.onChangeShowAlert({\n        showAlert: true,\n        alertType: ALERT_TYPES.SUCCESS,\n        alertMessage: 'Get data successfully!'\n      })\n    }).catch((error: AnyObject) => {\n      console.error('ERROR: ', error)\n      applicationActions.onChangeShowAlert({\n        showAlert: true,\n        alertType: ALERT_TYPES.ERROR,\n        alertMessage: 'Opps! An error occour while trying to get data!'\n      })\n    }).finally(() => {\n      setLoading(false)\n    })\n  }\n\n  /**\n   * Hanlde input search changed\n   * @param event\n   */\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    setSearchString(event?.target?.value)\n  }\n\n  useEffect(() => {\n    if (debouncedSearchString.length >= MINIMUN_SEARCH_KEY) {\n      // fetch new data whenever search key changed\n      fetchUser()\n    } else if (!debouncedSearchString.length) {\n      // Remove user list when search key is empty\n      setUsers([])\n      setTotalCount(0)\n    }\n  }, [debouncedSearchString])\n\n  return (\n    <div className=\"container\">\n      <div className=\"card\">\n        <span className=\"card__header\">\n          Search by name (Input at least 3 characters):\n          <input\n            className=\"input\"\n            type=\"text\"\n            name=\"search\"\n            placeholder=\"Input value here...\"\n            onChange={handleChange}\n          />\n          {totalCount ? <b> Total count: {totalCount} users</b> : <></>}\n        </span>\n        <div className=\"card__body card__body--scroll\">\n          <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Image</th>\n                  <th>Login</th>\n                  <th>Type</th>\n                  <th>Score</th>\n                </tr>\n              </thead>\n              <tbody>\n              {loading\n                ? <TableLoading colSpan={4} />\n                : <>\n                  {users.length\n                    ? users.map((user) => (\n                    <tr key={user?.id}>\n                      <td>\n                        <LazyImage\n                          alt={user.login}\n                          src={user.avatar_url}\n                          placeHolder={IMAGE_PLACEHOLDER}\n                          width={150}\n                          height=\"150\"\n                          keepRatio\n                        />\n                      </td>\n                      <td>{user.login}</td>\n                      <td>{user.type}</td>\n                      <td>{user.score}</td>\n                    </tr>\n                    ))\n                    : <tr>\n                        <td colSpan={4} className=\"text-center\">\n                          <i>Empty list</i>\n                        </td>\n                      </tr>\n                    }\n                </>\n                }\n              </tbody>\n            </table>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ChallengeOne\n"],"sourceRoot":""}